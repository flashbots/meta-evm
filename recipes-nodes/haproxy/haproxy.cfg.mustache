global
  # Maximum number of concurrent connections
  maxconn 4096
  # System limits configuration
  ulimit-n 32768

  stats socket /var/run/haproxy/admin.sock level admin mode 660

defaults
  mode http
  timeout connect 5s
  timeout client 30s
  timeout server 30s
  timeout http-request 10s
  timeout http-keep-alive 2s
  log global

  compression algo gzip
  compression type text/html text/plain application/json

listen default
  bind *:80
  bind *:443 ssl crt /usr/local/etc/haproxy/certs/ strict-sni

  # Define ACLs for privileged IPs
  acl privileged_ip src {{haproxy.rate_limit_privileged_ips}}

  # Stick table to track connections and bandwidth
  stick-table type ip size 100k expire 5m store conn_rate(10s),bytes_in_rate(1m),conn_cur,http_req_rate(10s)

  # Connection rate limits (connections per 10 seconds)
  http-request deny deny_status 429 if !privileged_ip { sc0_conn_rate gt {{haproxy.rate_limit_conn_rate_regular}} }
  http-request deny deny_status 429 if privileged_ip { sc0_conn_rate gt {{haproxy.rate_limit_conn_rate_privileged}} }

  # Concurrent connections per IP
  http-request deny deny_status 429 if !privileged_ip { src_conn_cur gt {{haproxy.rate_limit_total_conn_regular}} }
  http-request deny deny_status 429 if privileged_ip { src_conn_cur gt {{haproxy.rate_limit_total_conn_privileged}} }

  # Bandwidth limits (bytes per minute)
  http-request deny deny_status 429 if !privileged_ip { sc0_bytes_in_rate gt {{haproxy.rate_limit_bytes_in_rate_regular}} }
  http-request deny deny_status 429 if privileged_ip { sc0_bytes_in_rate gt {{haproxy.rate_limit_bytes_in_rate_privileged}} }

  # HTTP request rate limits (requests per 10 seconds)
  http-request deny deny_status 429 if !privileged_ip { sc0_http_req_rate gt {{haproxy.rate_limit_http_req_rate_regular}} }
  http-request deny deny_status 429 if privileged_ip { sc0_http_req_rate gt {{haproxy.rate_limit_http_req_rate_privileged}} }

  acl is_acme_challenge path_beg /.well-known/acme-challenge/

  http-request redirect scheme https code 301 if !{ ssl_fc } !is_acme_challenge

  http-request return status 200 content-type text/plain lf-string "%[path,field(-1,/)].${ACCOUNT_THUMBPRINT}\n" if is_acme_challenge
  http-request return status 200 content-type text/plain string "OK\n" if { path '/livez' }

  default_backend of_proxy

frontend prometheus
  bind 127.0.0.1:8405
  mode http
  http-request use-service prometheus-exporter if { path /metrics }
  no log

backend of_proxy
  mode http
  http-reuse always

  option httpchk GET /livez
  http-check expect status 200
  server of_proxy1 127.0.0.1:5543 check inter 5s fall 3 rise 1
