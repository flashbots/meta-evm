#!/bin/sh
### BEGIN INIT INFO
# Provides:          lighthouse
# Required-Start:    $network $remote_fs
# Required-Stop:     $network $remote_fs
# Default-Start:     5
# Default-Stop:      0 1 6
# Short-Description: Lighthouse Beacon Node
# Description:       Start and stop the lighthouse daemon
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/bin/lighthouse
NAME=lighthouse
DESC="Lighthouse Beacon Node"
PIDFILE=/var/run/lighthouse.pid
LOGFILE=/var/log/lighthouse.log
LIGHTHOUSE_USER=lighthouse
ETH_GROUP=eth
LIGHTHOUSE_DIR=/persistent/lighthouse
SUGGESTED_FEE_RECIPIENT=0x000000000000000000000000000000000000dead
JWT_SECRET_FILE=/var/volatile/jwt.hex

start() {
	echo -n "Starting $DESC: "

	# Ensure the lighthouse log exists and has correct permissions
	touch $LOGFILE
	chown $LIGHTHOUSE_USER:$ETH_GROUP $LOGFILE

	# Remount /var/volatile with increased size
	mount -o remount,size=90% /var/volatile

	# Generate a random JWT secret and save it to the file
	openssl rand -hex 32 | tr -d "\n" | tee $JWT_SECRET_FILE
	chown ${LIGHTHOUSE_USER}:${ETH_GROUP} $JWT_SECRET_FILE
	chmod 640 $JWT_SECRET_FILE

	start-stop-daemon -S --make-pidfile -p $PIDFILE -c $LIGHTHOUSE_USER:$ETH_GROUP -N -10 -b -a /bin/sh -- -c "exec ${DAEMON} \
		bn \
		--eth1 \
		--checkpoint-sync-url https://mainnet.checkpoint.sigp.io \
		--execution-endpoint http://localhost:8551 \
		--execution-jwt $JWT_SECRET_FILE \
		--suggested-fee-recipient ${SUGGESTED_FEE_RECIPIENT} \
		--http-allow-sync-stalled \
		--always-prepare-payload \
		--prepare-payload-lookahead 8000 \
		--disable-deposit-contract-sync \
		--http \
		--port 9000 \
		--http-port 3500 \
		--datadir "$LIGHTHOUSE_DIR" \
		2>&1 | tee ${LOGFILE}"
	echo "$NAME."
}

stop() {
    echo "Stopping $NAME"
    if [ -f $PIDFILE ]; then
        PID=$(cat $PIDFILE)
        # Find all child processes of the shell process
        PIDS="$PID $(pgrep -P $PID)"

        # Send SIGTERM to all processes
        for pid in $PIDS; do
            kill -TERM $pid 2>/dev/null
        done

        # Send SIGKILL to any remaining processes
        for pid in $PIDS; do
            kill -KILL $pid 2>/dev/null
        done

        rm -f $PIDFILE
    else
        echo "$PIDFILE not found, $NAME may not be running"
    fi
    echo "$NAME stopped"
}

case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  restart|reload)
        stop
        start
        ;;
  *)
	N=/etc/init.d/$NAME
	echo "Usage: $N {start|stop|restart|reload}" >&2
	exit 1
	;;
esac
exit 0
